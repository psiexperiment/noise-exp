from pathlib import Path
import subprocess

from atom.api import Atom, Enum, Str
from enaml.core.api import Looper
from enaml.layout.api import align, hbox, spacer, vbox
from enaml.widgets.api import (
    Action, ActionGroup, Container, Field, Label, MainWindow, Menu, MenuBar,
    ObjectCombo, PushButton
)

from psi.application import list_preferences


class Settings(Atom):

    logging_level = Enum('trace', 'debug', 'info', 'warning', 'error')('info')
    cohort = Str()
    experimenter = Str()
    note = Str()
    preference = Str()

    def run_experiment(self, save=True):
        filename = f'{{date_time}} {self.experimenter} {self.cohort} {self.note} noise-exposure'
        filename = ' '.join(filename.split())
        args = ['psi', 'noise_exposure']
        if self.preference:
            args.extend(['--preference', self.preference])
        if save:
            args.append(str(DATA_ROOT / filename))
        args.extend([
            '--debug-level-console', self.logging_level.upper(),
        ])
        print(' '.join(args))
        subprocess.check_output(args)


enamldef Main(MainWindow):

    title = 'Noise Exposure'
    initial_size = (400, 300)

    attr settings = Settings()

    MenuBar:
        Menu:
            title = '&Debug'
            Menu:
                title = 'Logging Level'
                ActionGroup:
                    Looper:
                        iterable = settings.get_member('logging_level').items
                        Action:
                            checkable = True
                            text = loop_item
                            checked ::
                                settings.logging_level = loop_item
                            checked << settings.logging_level == loop_item

    Container:
        layout_constraints => ():
            labels = children[:-1:2]
            fields = children[1:-1:2]
            start_button = children[-1]
            h_constraints = [hbox(l, f) for l, f in zip(labels, fields)]
            return [
                vbox(*h_constraints, hbox(spacer(0), start_button)),
                align('right', *labels),
                align('right', *fields),
            ]

        Label:
            text = 'Cohort'
        Field:
            text := settings.cohort
        Label:
            text = 'Experimenter'
        Field:
            text := settings.experimenter
        Label:
            text = 'Note'
        Field:
            text := settings.note
        Label:
            text = 'Settings'
        ObjectCombo: preferences:
            items = [str(p) for p in list_preferences('noise_exposure')]
            selected := settings.preference
            to_string = lambda x: Path(x).stem
        PushButton: start:
            text = 'Start'
            clicked ::
                settings.run_experiment(save=False)
                preferences.items = [str(p) for p in list_preferences('noise_exposure')]
