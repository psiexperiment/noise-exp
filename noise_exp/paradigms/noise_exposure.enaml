import logging
log = logging.getLogger(__name__)

import os

import numpy as np

from enaml.application import deferred_call
from enaml.widgets.api import Label, ProgressBar
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command

from psiaudio.pipeline import coroutine
from psi.context.api import ContextGroup
from psi.controller.api import (
    ControllerManifest, ExperimentAction, ExperimentCallback
)

from psi.controller.input import (Callback, Coroutine, IIRFilter, RMS, SPL)

from psi.data.plots import (TimeContainer, ChannelPlot, ViewBox)

from psi.data.sinks.api import BinaryStore
from psi.experiment.api import StatusItem
from psi.token.primitives import (
    BandlimitedNoise, BandlimitedFIRNoise, BroadbandNoise, Cos2Envelope,
    ShapedNoise
)

from psi.paradigms.core.io_mixins import ChannelInput, EpochChannelOutput
from cftscal.api import microphone_manager

EXPERIMENT = __name__.rsplit('.', 1)[-1]


def configure_experiment(pb, fs, t0_end, **kwargs):
    pb.maximum = int(round(t0_end * fs))


@coroutine
def update_progress(pb, target):
    pb.value = 0
    while True:
        data = (yield)
        deferred_call(setattr, pb, 'value', pb.value + data.shape[-1])
        target(data)


def initialize_settings(event):
    '''
    Configure microphone based on environment variables if provided
    '''
    context = event.workbench.get_plugin('psi.context')
    controller = event.workbench.get_plugin('psi.controller')

    if (gain := os.environ.get('NOISE_EXP_MICROPHONE_GAIN', None)):
        item = context.get_item('microphone_input_gain')
        item.set_value(gain)
        item.editable = False

    if (microphone := os.environ.get('NOISE_EXP_MICROPHONE', None)):
        mic_channel = controller.get_channel('hw_ai::microphone_monitor')
        mic_channel.calibration = microphone_manager.from_string(microphone).load()


@coroutine
def running_rms(target):
    # Stores running sum of squares
    n_discard = 10
    running_sum = 0
    running_n = 0
    while True:
        data = (yield)
        log.info(data.n_time)
        if n_discard > 0:
            discard = data[..., :n_discard]
            n_discard -= discard.n_time
            data = data[..., n_discard:]
        if data.n_time == 0:
            continue
        log.info(n_discard)
        log.info(data)
        running_sum += (data**2).sum(axis=-1)
        running_n += data.n_time
        running_rms = np.sqrt(running_sum / running_n)
        target(running_rms)


enamldef NoiseControllerManifest(ControllerManifest): manifest:

    Extension:
        id = EXPERIMENT + '.noise_exposure_stores'
        point = 'psi.data.sinks'

        BinaryStore:
            continuous_inputs = ['monitor_microphone', 'noise_level']

    Extension:
        id = EXPERIMENT + '.tokens'
        point = 'psi.token.tokens'

        Cos2Envelope: bandlimited_noise:
            name = 'bandlimited_noise_burst'
            label = 'Bandlimited noise'
            BandlimitedNoise:
                pass

        Cos2Envelope: broadband_noise:
            name = 'broadband_noise_burst'
            label = 'Broadband noise'
            BroadbandNoise:
                pass

        Cos2Envelope: shaped_noise:
            name = 'shaped_noise_burst'
            label = 'Shaped noise'
            ShapedNoise:
                pass

        Cos2Envelope: bandlimited_fir_noise:
            name = 'bandlimited_fir_noise_burst'
            label = 'FIR noise'
            BandlimitedFIRNoise:
                pass

    Extension:
        id = EXPERIMENT + '.items'
        point = 'psi.context.items'

        ContextGroup:
            name = 'hardware_settings'
            label = 'Hardware'

    Extension:
        id = EXPERIMENT + '.io'
        point = 'psi.controller.io'

        EpochChannelOutput: output:
            name = 'exposure'
            label = 'Exposure'
            configurable = True
            group_name = 'hardware_settings'
            token = bandlimited_fir_noise

        IIRFilter:
            source_name = 'monitor_microphone'
            btype = 'highpass'
            ftype = 'butter'
            N = 2
            f_highpass = 100
            name = 'microphone_filtered'

            RMS:
                name = 'RMS'
                duration = 1
                SPL: spl:
                    name = 'noise_level'

                Coroutine:
                    coroutine = running_rms
                    SPL:
                        Callback:
                            function = lambda x: setattr(average_level, 'text', f'{x[-1]:.1f} dB SPL')

        Coroutine:
            source_name = 'monitor_microphone'
            name = 'update_progress'
            args = (pb_experiment,)
            coroutine = update_progress

    Extension:
        id = EXPERIMENT + '.workspace'
        point = 'psi.experiment.status'

        StatusItem:
            label = 'Exposure status'

            ProgressBar: pb_experiment:
                name = 'noise_progress'
                text_visible = True

        StatusItem:
            label = 'Average level (dB SPL)'

            Label: average_level:
                text = ''

    Extension:
        id = EXPERIMENT + '.commands'
        point = 'enaml.workbench.core.commands'

        Command:
            id = manifest.id + '.initialize_settings'
            handler = initialize_settings

    Extension:
        id = EXPERIMENT + '.actions'
        point = 'psi.controller.actions'
        rank = 100

        ExperimentAction:
            event = 'experiment_initialize'
            command = 'psi.context.initialize'
            kwargs = {'selector': None}

        ExperimentAction:
            event = 'context_initialized'
            command = 'exposure.prepare'

        ExperimentAction:
            event = 'experiment_start'
            command = 'exposure.start'
            kwargs = {'start': 1}

        ExperimentCallback:
            event = 'exposure_start'
            callback = configure_experiment
            kwargs = {'pb': pb_experiment, 'fs': output.fs}

        ExperimentAction:
            event = 'exposure_end'
            command = 'psi.controller.stop'

        ExperimentAction:
            event = 'plugins_started'
            command = manifest.id + '.initialize_settings'

    Extension:
        id = EXPERIMENT + '.plots'
        point = 'psi.data.plots'

        TimeContainer:
            name = 'noise_level_container'
            label = 'Level'
            delay = 0
            span = 600

            ViewBox:
                label = 'Noise level (dB SPL)'
                save_limits = True
                y_min = 108
                y_max = 118

                ChannelPlot:
                    source_name = 'noise_level'
